openapi: 3.0.3
info:
  title: Pharmacy - OpenAPI 3.0
  description: |-
    Write a service for the work of a pharmacy. The pharmacist can add medicine to the database, delete them, edit information about them. The user can view information about medicine, make a purchase, if the medicine is not available, it can be added to the demand.
  contact:
    email: v0961491914@gmail.com
  version: 1.0.11
externalDocs:
  description: Find out more about project
  url: https://github.com/Vasyl808/python_labs
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: medicine
    description: Everything about medicine.
  - name: pharmacy
    description: Access to medicine database.
  - name: user
    description: Operations about user.
  - name: category
    description: Operations about categoru.
paths:
  /medicine:
    post:
      tags:
        - medicine
      summary: Add a new medicine to the pharmacy
      description: Add a new medicine to the pharmacy
      operationId: addMedicine
      requestBody:
        description: Create a new medicine in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medicine'
          application/xml:
            schema:
              $ref: '#/components/schemas/Medicine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Medicine'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '405':
          description: Invalid input
      security:
        - pharmacy_auth:
            - write:medicine
            - read:medicine
  /medicine/findByStatus:
    get:
      tags:
        - medicine
      summary: Finds medicine by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findMedicineByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '400':
          description: Invalid status value
      security:
        - pharmacy_auth:
            - write:medicine
            - read:medicine
  /medicine/findDemand:
    get:
      tags:
        - medicine
      summary: Finds medicine by status
      operationId: findMedicineByDemand
      parameters:
        - name: demand
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
             type: boolean
             enum:
                - true
                - false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '400':
          description: Invalid status value
      security:
        - pharmacy_auth:
            - write:medicine
            - read:medicine
  /medicine/{medicineId}:
    get:
      tags:
        - medicine
      summary: Find medicine by ID
      description: Returns a single edicine
      operationId: getMedicineById
      parameters:
        - name: medicineId
          in: path
          description: ID of medicine to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '400':
          description: Invalid ID supplied
        '404':
          description: Medicine not found
      security:
        - api_key: []
        - pharmacy_auth:
            - write:medicine
            - read:medicine
    put:
      tags:
        - medicine
      summary: Updates a medicine in the store with form data
      description: ''
      operationId: updateMedicineWithForm
      parameters:
        - name: medicineId
          in: path
          description: ID of medicine that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of medicine that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of medicine that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
        '400':
          description: Invalid ID supplied
        '404':
          description: Medicine not found
      security:
        - pharmacy_auth:
            - write:medicine
            - read:medicine
    delete:
      tags:
        - medicine
      summary: Deletes a medicine
      description: delete a medicine
      operationId: deleteMedicine
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: medicineId
          in: path
          description: Medicine id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid medicine value
      security:
        - pharmacy_auth:
            - write:medicine
            - read:medicine
  /medicine/demand/{medicineId}:
    put:
      tags:
        - medicine
      summary: Add medicine in demand
      operationId: addMedicineDemand
      parameters:
        - name: medicineId
          in: path
          description: ID of medicine to demand
          required: true
          schema:
            type: integer
            format: int64
        - name: demand
          in: query
          required: true
          schema:
             type: boolean
             enum:
                - true
                - false
      responses:
        200:
          description: Successful operation
        405:
          description: Invalid input
      security:
        - pharmacy_auth:
            - write:medicine
            - read:medicine
      requestBody:
        $ref: '#/components/requestBodies/Medicine'
  /pharmacy/inventory:
    get:
      tags:
        - pharmacy
      summary: Returns medicine inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /pharmacy/order:
    post:
      tags:
        - pharmacy
      summary: Place an order for a medicine
      description: Place a new order in the pharmacy
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /pharmacy/order/medicine:
    post:
      tags:
        - pharmacy
      summary: Place an order for a medicine
      description: Place a new order in the pharmacy
      operationId: placeOrders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order_details'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order_details'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order_details'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order_details'
        '405':
          description: Invalid input
  /pharmacy/order/{orderId}/{medicineId}:
    delete:
      tags:
        - pharmacy
      summary: Delete purchase order by ID
      operationId: deleteOrder_detailsBYId
      parameters:
        - name: orderId
          in: path
          description: ID of the orderId that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
        - name: medicineId
          in: path
          description: ID of the medicineId that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /pharmacy/order/{orderId}:
    get:
      tags:
        - pharmacy
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    put:
      tags:
        - pharmacy
      summary: Update order
      description: This can only be done by the logged in user or admin.
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: orderId that need to be update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: Successful operation
        405:
          description: Invalid input
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
        - pharmacy
      summary: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: The id that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: userId that need to be deleted
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The userId that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
  /category:
    post:
      tags:
        - category
      summary: Add a new category to the pharmacy
      description: Add a new category to the pharmacy
      operationId: addCategory
      requestBody:
        description: Create a new Category in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '405':
          description: Invalid input
      security:
        - pharmacy_auth:
            - write:category
            - read:category
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Find category by ID
      description: Returns a single edicine
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
      security:
        - api_key: []
        - pharmacy_auth:
            - write:categor
            - read:category
    put:
      tags:
        - category
      summary: Updates a category in the store with form data
      description: ''
      operationId: updateCategoryWithForm
      parameters:
        - name: categoryId
          in: path
          description: ID of Category that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of Category that needs to be updated
          schema:
            type: string
        - name: description
          in: query
          description: Descripti of Category that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - pharmacy_auth:
            - write:category
            - read:category
    delete:
      tags:
        - category
      summary: Deletes a category
      description: delete a category
      operationId: deleteCategory
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: categoryId
          in: path
          description: category id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid category value
      security:
        - pharmacy_auth:
            - write:category
            - read:category
components:
  schemas:
    Order:
      type: object
      required:
        - id_order
        - user_id
        - address
        - details
        - shipDate
        - order_status
        - complete
        - date_of_purchase
      properties:
        id_order:
          type: integer
          format: int64
          example: 10
        user_id:
          type: integer
          format: int64
          example: 1
        address:
          type: string
          example: test
        date_of_purchase:
          type: string
          format: date-time
        shipDate:
          type: string
          format: date-time
        order_status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Order_details:
      required:
        - order_id
        - medicine_id
        - count
      type: object
      properties:
        order_id:
          type: integer
          format: int64
          example: 1
        medicine_id:
          type: integer
          format: int64
          example: 1
        count:
          type: integer
          format: int64
          example: 10
      xml:
        name: order_details
    Category:
      required:
        - id_category
        - category_name
        - description
      type: object
      properties:
        id_category:
          type: integer
          format: int64
          example: 1
        category_name:
          type: string
          example: test
        description:
          type: string
          example: test
      xml:
        name: category
    User:
      required:
        - id_user
        - username
        - first_name
        - last_name
        - password
        - phone
        - userstatus
        - email
        - age
      type: object
      properties:
        id_user:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: user
        first_name:
          type: string
          example: user
        last_name:
          type: string
          example: user
        age:
          type: integer
          format: int64
          example: 20
        email:
          type: string
          example: user@email.com
        password:
          type: string
          example: '12345'
        phone_number:
          type: string
          example: '0000'
        userstatus:
          type: string
          example: pharmacist
          enum:
            - pharmacist
            - user
      xml:
        name: user
    Medicine:
      required:
        - medicine_name
        - id_medicine
        - category_id
        - medicine_description
        - price
        - medicine_status
        - manufacturer
        - demand
      type: object
      properties:
        id_medicine:
          type: integer
          format: int64
          example: 10
        medicine_name:
          type: string
          example: test
        manufacturer:
          type: string
          example: test
        medicine_description:
          type: string
          example: test
        category_id:
          type: integer
          format: int64
          example: 10
        price:
          type: integer
          format: int64
          example: 10
        medicine_status:
          type: string
          description: medicine status in the store
          enum:
            - available
            - pending
            - sold
        demand:
          type: boolean
          default: false
      xml:
        name: medicine
  requestBodies:
    Medicine:
      description: Medicine object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Medicine'
        application/xml:
          schema:
            $ref: '#/components/schemas/Medicine'
  securitySchemes:
    pharmacy_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:8080/api/v1/oauth/authorize
          scopes:
            write:pets: modify medicine in your account
            read:pets: read your medicine
    api_key:
      type: apiKey
      name: api_key
      in: header